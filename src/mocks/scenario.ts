import { EControlType, EStatus } from '@constants/masterData';
import type { AttributeDTO } from '@dtos';

const getRandomDate = () => {
  const start = new Date(2025, 0, 1);
  const end = new Date();
  return new Date(
    start.getTime() + Math.random() * (end.getTime() - start.getTime()),
  ).toISOString();
};

const users = [
  'admin.tester',
  'john.doe',
  'jane.smith',
  'bob.wilson',
  'alice.cooper',
];
const getRandomUser = () => users[Math.floor(Math.random() * users.length)];

const mockAttributes: AttributeDTO[] = [
  {
    id: '1',
    name: 'Text Input',
    controlType: EControlType.TEXT,
    content: 'Sample text content',
    value: 'Sample text value',
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '2',
    name: 'Checkbox Group',
    controlType: EControlType.CHECKBOX,
    content: 'Checkbox options',
    value: ['option1', 'option2', 'option3'],
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '3',
    name: 'Switch Toggle',
    controlType: EControlType.SWITCH,
    content: 'Switch description',
    value: ['enable', 'disable'],
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '4',
    name: 'Dropdown Select',
    controlType: EControlType.SELECT,
    content: 'Select an option',
    value: ['option1', 'option2', 'option3'],
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '5',
    name: 'Radio Group',
    controlType: EControlType.RADIO,
    content: 'Choose one option',
    value: ['option1', 'option2', 'option3'],
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '6',
    name: 'Date Picker',
    controlType: EControlType.DATETIME,
    content: 'Select a date',
    value: '2024-01-01',
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '7',
    name: 'Number Input',
    controlType: EControlType.NUMBER,
    content: 'Enter a number',
    value: 42,
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '8',
    name: 'Text Area',
    controlType: EControlType.EDITOR,
    content: 'Enter long text',
    value: 'This is a sample long text input for the text area field.',
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '9',
    name: 'Image Upload',
    controlType: EControlType.IMAGE,
    content: 'Upload an image',
    value: { alt: 'Sample image', url: 'https://via.placeholder.com/150' },
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
  {
    id: '10',
    name: 'Link Button',
    controlType: EControlType.LINK,
    content: 'Click the button',
    value: 'https://example.com',
    createdDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedDate: getRandomDate(),
    updatedBy: getRandomUser(),
    status: '',
  },
];

export const MOCK_SCENARIOS = Array.from({ length: 20 }, (_, index) => ({
  id: `scenario-${index + 1}`,
  name: `Scenario ${index + 1}`,
  code: `SC-${index + 1}`,
  description: `Description for scenario ${index + 1}`,
  attributes: mockAttributes.map((attr) => ({
    ...attr,
    id: `${attr.id}-${index + 1}`,
    createdDate: getRandomDate(),
    updatedDate: getRandomDate(),
    createdBy: getRandomUser(),
    updatedBy: getRandomUser(),
  })),
  createdDate: getRandomDate(),
  createdBy: getRandomUser(),
  updatedDate: getRandomDate(),
  updatedBy: getRandomUser(),
  status: Math.random() > 0.5 ? EStatus.ACTIVE : EStatus.INACTIVE,
}));
